Content of this workshop:
 [v] higher-order functions
 [v] basic functional operators
 [v] Option
     - function that may return a null-pointer, see https://www.youtube.com/watch?v=Mw_Jnn_Y5iA
     - (higher-order) functions on Option
     - met introductie flatMap/for-comprehension
     - vertalen van en naar flatMap/map/filter; misschien ook gebruik maken van JavaP/ScalaC (http://alvinalexander.com/scala/how-to-disassemble-decompile-scala-source-code-javap-scalac-jad)
 [v] Try
     - function that my throw an exception
     - (higher-order) functions on Try
     - partial functions
 [v] Seq/List/Map/<other collections>
     v Java vs. Scala
     x map/filter/fold/foreach al besproken
     v flatMap
     x put reduce/reduceOption in this section instead of 'functional-operators'!
     v andere (hogere orde) functions op List zoals drop(While), forall, partition, slice, span, take(While), zip(WithIndex)
     v afwijkende operators op Map
 [ ] follow the types

Assignments:
 [v] Employee (higher-order functions refactoring)
 [v] Refactor a peace of imperative code to a for-comprehension
     + http://nerd.kelseyinnis.com/blog/2013/11/12/idiomatic-scala-the-for-comprehension/
     v Option
     v List
     x Try
 [v] Animals (Map/Option)
 [x] Lange chain van operators met verschillende soorten operators door elkaar, ook die niet aan bod gekomen zijn
 [x] Andere opgaven met Try/Option/List/...
 [v] Implement operators in terms of folds (size, filter, map, forall, exists, reverse; zie paper Erik Meijer)
 [v] Implement map in terms of flatMap and apply
 [v] Implement a running sum and average over the last n element
 [v] Resource monad (Scala ARM library)
     - Lees van meerdere files
     - Schrijf naar meerdere files
 [v] Tree Monad (John Hughes - http://www.cse.chalmers.se/~rjmh/OPLSS/Exercises.pdf)
     - map
     - flatMap
     - zipTree
     - https://github.com/rvanheest/Experiments/blob/monadics-libs/Monadics/src/main/scala/monadics/instances/Tree.scala

Bonus assignments:
 [x] Implement foldLeft in terms of foldRight
 [ ] Implement the Continuation Monad [special case of (T -> ()) -> ()] of FP101x-lab5
 [ ] Implement the State Monad
